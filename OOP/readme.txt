公有属性/类属性
直接定义在class下的属性就是公有属性/类属性
- 公有属性/静态属性 可以直接通过类直接访问，也可以直接通过实例进行访问；
- 通过类的某个实例对公有属性进行修改，实际上对为该实例添加了一个与类的公有属性名称相同的成员属性，对真正的公有属性是没有影响的，因此它不会影响其他实例获取的该公有属性的值；
- 通过类对公有属性进行修改，必然是会改变公有属性原有的值，他对该类所有的实例是都有影响的。

成员属性/实例属性
成员属性，又称成员变量 或 实例属性，也就是说这些属性是 该类的每个实例对象单独持有的属性。成员属性需要在类的__init__方法中进行声明
- 成员属性可以直接通过实例对象来访问和更改；
- 成员属性是每个实例对象独有的，某个实例对象的成员属性被更改不会影响其他实例对象的相同属性的值；
- 成员属性的值不能通过类来访问和修改

私有属性
私有属性和成员属性一样，是在__init__方法中进行声明，但是属性名需要以双下划线__开头
- 私有变量不能通过类直接访问；
- 私有变量也不能通过实例对象直接访问；
- 私有变量可以通过成员方法进行访问。

访问私有变量
办法1：通过一个专门的成员方法返回该私有变量的值
办法2：通过 实例对象._类名__私有变量名 的方式来访问

实现继承 ：指直接继承父类的属性和已定义并实现的的方法；
接口继承 ：仅继承父类类的属性和方法名称，子类必须自行实现方法的具体功能代码。
接口的所有子类拥有接口中定义的所有同名的方法；
接口的所有子类在调用接口中定义的方法时，必须先自己实现方法代码；
接口的各个子类在实现接口中同一个方法时，具体的代码实现各不相同，这就是多态。

类中封装的是数据和操作数据的方法。数据就是属性
公有属性/类变量、成员属性/实例变量 和 私有属性，类中的方法分为以下几种：

成员方法： 与成员属性相似，是通过类的实例对象去访问；成员方法的第一个参数必须是当前实例对象，通常写为self；实际上，我们也可以通过类名来调用成员方法，只是此时我们需要手动的传递一个该类的实例对象给成员方法的self参数，这样用明显不是一种优雅的方法，因此基本不会这样使用。

私有方法： 以双下划线开头的成员方法就是私有方法，与私有属性类似，只能在实例对象内部访问，且不能被子类继承；私有方法的第一个参数也必须是当前实例对象本身，通常写为self；

类方法： 以@classmethod来装饰的成员方法就叫做类方法，它要求第一次参数必须是当前类。与公有属性/静态属性 相似，除了可通过实例对象进行访问，还可以直接通过类名去访问，且第一个参数表示的是当前类，通常写为cls；另外需要说明的是，类方法只能访问公有属性，不能访问成员属性，因此第一个参数传递的是代表当前类的cls，而不是表示实例对象的self。

静态方法： 以@staticmethod来装饰的成员方法就叫做静态方法，静态方法通常都是通过类名去访问，且严格意义上来讲，静态方法已经与这个类没有任何关联了，因为静态方法不要求必须传递实例对象或类参数，这种情况下它不能访问类中的任何属性和方法。

属性方法： 这个比较有意思，是指可以像访问成员属性那样去访问这个方法；它的第一个参数也必须是当前实例对象，且该方法必须要有返回值。

成员方法也可以通过类名去访问，但是有点多此一举的感觉；
类方法和静态方法也可以通过实例对象去访问，但是通常情况下都是通过类名直接访问的；
最重要的一条总结：类的各种方法，能访问哪些属性实际上是跟方法的参数有关的：
比如成员方法要求第一个参数必须是一个该类的实例对象，那么实例对象能访问的属性，成员方法都能访问，而且还能访问私有属性；
再比如，类方法要求第一个参数必须是当前类，因此它只能访问到类属性/公有属性，而访问不到成员属性 和 私有属性；
再比如，静态方法对参数没有要求，也就意味着我们可以任意给静态方法定义参数；假如我们给静态方法定义了表示当前类的参数，那么就可以访问类属性/公有属性；假如我们给静态方法定义了表示当前类的实例对象的参数，那么就可以访问成员属性；假如我们没有给静态方法定义这两个参数，那么就不能访问该类或实例对象的任何属性。
